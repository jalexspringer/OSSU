* Working towards an open source comp sci education.
Following the courses laid out here: [https://github.com/open-source-society/computer-science]
* Curriculum and completion status:
** Core programming
Topics covered: functional programming design for testing program requirements common design patterns unit testing object-oriented design Java static typing dynamic typing ML-family languages (via Standard ML) Lisp-family languages (via Racket) Ruby and more
- [ ] How to Code - Simple Data 	7 weeks 	8-10 hours/week 	none
- [ ] How to Code - Complex Data 	6 weeks 	8-10 hours/week 	How to Code: Simple Data
- [ ] Software Construction - Data Abstraction 	6 weeks 	8-10 hours/week 	How to Code - Complex Data
- [ ] Software Construction - Object-Oriented Design 	6 weeks 	8-10 hours/week 	Software Construction - Data Abstraction
- [ ] Programming Languages, Part A 	4 weeks 	8-16 hours/week 	recommended: Java, C
- [ ] Programming Languages, Part B 	3 weeks 	8-16 hours/week 	Programming Languages, Part A
- [ ] Programming Languages, Part C 	3 weeks 	8-16 hours/week 	Programming Languages, Part B

** Core math
- [ ] Topics covered: linear transformations matrices vectors mathematical proofs number theory differential calculus integral calculus sequences and series discrete mathematics basic statistics O-notation graph theory vector calculus discrete probability and more
- [ ] Linear Algebra - Foundations to Frontiers (alt) 	15 weeks 	8 hours/week 	pre-calculus
- [ ] Calculus One1 (alt) 	16 weeks 	8-10 hours/week 	pre-calculus
- [ ] Calculus Two: Sequences and Series 	7 weeks 	9-10 hours/week 	Calculus One
- [ ] Mathematics for Computer Science 	13 weeks 	5 hours/week 	single variable calculus (Calculus Two)

** Core systems
Topics covered: boolean algebra gate logic memory machine language computer architecture assembly machine language virtual machines high-level languages compilers operating systems network protocols and more
- [ ] Build a Modern Computer from First Principles: From Nand to Tetris (alt) 	6 weeks 	7-13 hours/week 	none |
- [ ] Build a Modern Computer from First Principles: Nand to Tetris Part II 	6 weeks 	12-18 hours/week 	From Nand to Tetris Part I
- [ ] Introduction to Computer Networking 	8 weeks 	4â€“12 hours/week 	algebra, probability, basic CS

** Core theory
Topics covered: divide and conquer sorting and searching randomized algorithms graph search shortest paths data structures greedy algorithms minimum spanning trees dynamic programming NP-completeness and more
- [ ] Algorithms (1/4)1 	4 weeks 	4-8 hours/week 	one programming language, proofs, probability
- [ ] Algorithms (2/4)1 	4 weeks 	4-8 hours/week 	Algorithms (1/4)
- [ ] Algorithms (3/4) 	4 weeks 	4-8 hours/week 	Algorithms (2/4)
- [ ] Algorithms (4/4) 	4 weeks 	4-8 hours/week 	Algorithms (3/4)

** Core applications
Topics covered: Agile methodology REST software specifications refactoring relational databases transaction processing data modeling neural networks supervised learning unsupervised learning OpenGL raytracing block ciphers authentication public key encryption and more
- [ ] Databases 	12 weeks 	8-12 hours/week 	some programming, basic CS
- [ ] Machine Learning 	11 weeks 	4-6 hours/week 	linear algebra
- [ ] Computer Graphics 	6 weeks 	12 hours/week 	C++ or Java, linear algebra
- [ ] Cryptography I 	6 weeks 	5-7 hours/week 	linear algebra, probability
- [ ] Software Engineering: Introduction 	6 weeks 	8-10 hours/week 	Software Construction - Object-Oriented Design
- [ ] Software Development Capstone Project 	6-7 weeks 	8-10 hours/week 	Software Engineering: Introduction
